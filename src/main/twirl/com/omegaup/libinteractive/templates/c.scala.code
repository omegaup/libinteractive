@import com.omegaup.libinteractive.idl.IDL
@import com.omegaup.libinteractive.idl.Interface
@import com.omegaup.libinteractive.target.C
@import com.omegaup.libinteractive.target.Options
@(c: C, idl: IDL, options: Options, interface: Interface)
/* @c.message */
#include "@(options.moduleName).h"
#define _XOPEN_SOURCE 600
#if !defined(_WIN32) && !defined(_GNU_SOURCE)
#define _GNU_SOURCE
#endif
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

#if defined(_WIN32)
#if !defined(PRIuS)
#define PRIuS "Iu"
#endif
#else
@if(options.transact) {
#include <errno.h>
#include <libtransact.h>

}
#if !defined(PRIuS)
#define PRIuS "zu"
#endif
// Windows requires this flag to open files in binary mode using the
// open syscall.
#define O_BINARY 0
#endif

#ifdef __cplusplus
extern "C" {
#endif

@if(options.transact) {
static struct transact_interface* @c.transactName(interface);
} else {
@c_stream_functions(options.verbose)

static struct __stream __in, __out;
}

#ifdef __cplusplus
}
#endif

@if(options.transact) {
@c_message_loop_transact(c, options, idl.main, interface, c.transactName(interface))
} else {
@c_message_loop(c, options, idl.main, interface, "__out", "__in")
}

@for(function <- idl.main.functions) {
@if(options.transact) {
@c_shim_transact(c, options, function, idl.main, interface, c.transactName(interface))
} else {
@c_shim(c, options, function, idl.main, interface, "__out", "__in")
}

}

int main(int argc, char* argv[]) {
	int retval = 0;

@if(options.transact) {
	@if(options.verbose) {
		fprintf(stderr, "Opening `@interface.name'\n");
	}
	@c.transactName(interface) = transact_interface_open(0,
				"@c.transactFilename(interface)",
				"@c.shmFilename(interface)", @interface.shmSize);
	if (!@c.transactName(interface)) {
		fprintf(stderr, "Failed to open transact interface '@interface.name': %m\n");
		exit(243);
	}

	struct transact_message message;
	transact_message_init(@(c.transactName(interface)), &message);
	if (transact_message_recv(&message) != 0) {
		fprintf(stderr, "Invalid message offset for '@interface.name': %m\n");
		exit(238);
	}
	__message_loop_@(idl.main.name)(&message, -1, 1);
} else {
	openstream(&__in, "@c.pipeFilename(interface, interface, true)", O_RDONLY);
	openstream(&__out, "@c.pipeFilename(interface, interface, false)", O_WRONLY);

	for (int i = 1; i < argc; ++i) {
		if (strcmp(argv[i], "--print-ready") == 0) {
			fprintf(stderr,
			        "Debugger attached, type case contents "
			        "(like the one in \"examples/sample.in\")...\n");
		}
	}

	__message_loop_@(idl.main.name)(-1, 1);

	closestream(&__in);
	closestream(&__out);
}

	return retval;
}

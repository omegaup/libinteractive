@import com.omegaup.libinteractive.idl.IDL
@import com.omegaup.libinteractive.idl.Interface
@import com.omegaup.libinteractive.target.C
@import com.omegaup.libinteractive.target.Options
@(c: C, options: Options, idl: IDL)
/* @c.message */
#define _XOPEN_SOURCE 600
#if !defined(_WIN32) && !defined(_GNU_SOURCE)
#define _GNU_SOURCE
#endif
#include <inttypes.h>
#include <fcntl.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include "@(options.moduleName).h"

#if defined(__GNUC__)
#define __NOINLINE __attribute__((noinline))
#else
#define __NOINLINE
#endif

#if defined(_WIN32)
#if !defined(PRIuS)
#define PRIuS "Iu"
#endif
#else
@if(options.transact) {
#include <errno.h>
#include <libtransact.h>

}
#if !defined(PRIuS)
#define PRIuS "zu"
#endif
// Windows requires this flag to open files in binary mode using the
// open syscall.
#define O_BINARY 0
#endif

#ifdef __cplusplus
extern "C" {
#endif

@if(options.transact) {
static struct transact_interface *@idl.interfaces.map(c.transactName).mkString(", *");
} else {
@c_stream_functions(options.verbose)

static struct __stream @idl.interfaces.flatMap(interface =>
		List(c.pipeName(interface, true), c.pipeName(interface, false))
).mkString(", ");
}

void __NOINLINE __libinteractive_init() {
@if(options.transact) {
@for(interface <- idl.interfaces) {
	@if(options.verbose) {
		fprintf(stderr, "Opening `@interface.name'\n");
	}
	@c.transactName(interface) = transact_interface_open(1,
		"@c.transactFilename(interface)", "@c.shmFilename(interface)", @interface.shmSize);
	if (!@c.transactName(interface)) {
		fprintf(stderr, "Failed to open transact interface '@interface.name': %m\n");
		exit(243);
	}
}
} else {
@for(interface <- idl.interfaces) {
	openstream(&@c.pipeName(interface, true), "@c.pipeFilename(interface, idl.main, true)", O_WRONLY);
	openstream(&@c.pipeName(interface, false), "@c.pipeFilename(interface, idl.main, false)", O_RDONLY);
}
}
}

#if defined(_WIN32)
// declared in windows.h
void mainCRTStartup();

void __entry() {
	__libinteractive_init();

	// Perform regular libc startup
	mainCRTStartup();
}
// Some versions of mingw's name mangling add an extra underscore. Sometimes.
// So let's just define both flavors so that the symbol is always found.
void _entry() __attribute__ ((alias ("__entry")));

#elif defined(__APPLE__)

// OS X makes it harder to define the entrypoint in pure assembly, so let's
// rely on using a real C function with inline assembly.
void _entry() {
#if defined(__x86_64__)
	__asm__(
		"popq %%rbp\n"  // Remove %rbp from the stack that gcc helpfully added.
		"pushq %%rdx\n" // Store %rdx since we will need it later.
		"callq ___libinteractive_init\n"
		"popq %%rdx\n"
		"jmp _main\n"
		:::
#elif defined(__ARM64_ARCH_8__)
		"sub sp, sp, #64\n"
		"stp x0, x1, [sp]\n"
		"stp x2, x3, [sp,#16]\n"
		"stp x4, x5, [sp,#32]\n"
		"stp x6, x7, [sp,#48]\n"
		"bl ___libinteractive_init\n"
		"ldp x0, x1, [sp]\n"
		"ldp x2, x3, [sp,#16]\n"
		"ldp x4, x5, [sp,#32]\n"
		"ldp x6, x7, [sp,#48]\n"
		"add sp, sp, #64\n"
		"b _main\n"
		:::
#else
#error libinteractive is not supported in your architecture
#endif
	);
}

#endif // _WIN32 || __APPLE__

#ifdef __cplusplus
}
#endif

@for(interface <- idl.interfaces) {
@if(options.transact) {
@c_message_loop_transact(c, options, interface, idl.main, c.transactName(interface))
} else {
@c_message_loop(c, options, interface, idl.main,
		c.pipeName(interface, true), c.pipeName(interface, false))
}

@for(function <- interface.functions) {
@if(options.transact) {
@c_shim_transact(c, options, function, interface, idl.main, c.transactName(interface))
} else {
@c_shim(c, options, function, interface, idl.main,
	c.pipeName(interface, true), c.pipeName(interface, false))
}

}
}
